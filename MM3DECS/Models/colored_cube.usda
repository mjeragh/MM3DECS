#usda 1.0
(
    defaultPrim = "Cube"
    upAxis = "Y"
)

def Scope "Materials"
{
    def Material "Red"
    {
        token outputs:surface.connect = </Materials/Red/surfaceShader.outputs:surface>

        def Shader "surfaceShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (1.0, 0.0, 0.0)
            token outputs:surface
        }
    }

    def Material "Green"
    {
        token outputs:surface.connect = </Materials/Green/surfaceShader.outputs:surface>

        def Shader "surfaceShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.0, 1.0, 0.0)
            token outputs:surface
        }
    }

    def Material "Blue"
    {
        token outputs:surface.connect = </Materials/Blue/surfaceShader.outputs:surface>

        def Shader "surfaceShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.0, 0.0, 1.0)
            token outputs:surface
        }
    }

    def Material "Yellow"
    {
        token outputs:surface.connect = </Materials/Yellow/surfaceShader.outputs:surface>

        def Shader "surfaceShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (1.0, 1.0, 0.0)
            token outputs:surface
        }
    }

    def Material "Cyan"
    {
        token outputs:surface.connect = </Materials/Cyan/surfaceShader.outputs:surface>

        def Shader "surfaceShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.0, 1.0, 1.0)
            token outputs:surface
        }
    }

    def Material "Magenta"
    {
        token outputs:surface.connect = </Materials/Magenta/surfaceShader.outputs:surface>

        def Shader "surfaceShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (1.0, 0.0, 1.0)
            token outputs:surface
        }
    }
}

def Xform "Cube" (
    kind = "component"
)
{
    def Mesh "FrontFace"
    {
        float3[] points = [(-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (0.5, 0.5, 0.5), (-0.5, 0.5, 0.5)]
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 2, 3]
        rel material:binding = </Materials/Green>
    }

    def Mesh "BackFace"
    {
        float3[] points = [(0.5, -0.5, -0.5), (-0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5)]
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 2, 3]
        rel material:binding = </Materials/Red>
    }

    def Mesh "LeftFace"
    {
        float3[] points = [(-0.5, -0.5, -0.5), (-0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (-0.5, 0.5, -0.5)]
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 2, 3]
        rel material:binding = </Materials/Blue>
    }

    def Mesh "RightFace"
    {
        float3[] points = [(0.5, -0.5, 0.5), (0.5, -0.5, -0.5), (0.5, 0.5, -0.5), (0.5, 0.5, 0.5)]
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 2, 3]
        rel material:binding = </Materials/Yellow>
    }

    def Mesh "TopFace"
    {
        float3[] points = [(-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (0.5, 0.5, -0.5), (-0.5, 0.5, -0.5)]
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 2, 3]
        rel material:binding = </Materials/Cyan>
    }

    def Mesh "BottomFace"
    {
        float3[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (0.5, -0.5, 0.5), (-0.5, -0.5, 0.5)]
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 2, 3]
        rel material:binding = </Materials/Magenta>
    }
}
